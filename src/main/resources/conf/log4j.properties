### set log levels ###
#log4j.rootLogger = debug , stdout , D , E
log4j.rootLogger = debug , stdout , D,E,I
###  output to the console ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
#log4j.appender.stdout.layout.ConversionPattern = %d{ABSOLUTE} %5p %c{ 1 }:%L - %m%n
log4j.appender.stdout.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [%c]-[%p] %m%n
### Output to the log file ###

log4j.appender.E = org.apache.log4j.RollingFileAppender
log4j.appender.E.MaxFileSize=1MB 
log4j.appender.E.File = logs/debug
log4j.appender.E.DatePattern='_'yyyy-MM-dd-HH-mm'.log'
log4j.appender.E.Append = true
log4j.appender.E.Threshold = DEBUG
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} %p -[%l ] - %m%n
### Save exception information to separate file ###
log4j.appender.D = org.apache.log4j.FileAppender
log4j.appender.D.File = logs/error.log
log4j.appender.D.Append = true
log4j.appender.D.Threshold = ERROR
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} %p -[%l ] - %m%n

log4j.appender.I = org.apache.log4j.FileAppender
log4j.appender.I.File =  logs/info.log
log4j.appender.I.Append = true
log4j.appender.I.Threshold = INFO
log4j.appender.INFO.Encoding=utf-8
log4j.appender.I.layout = org.apache.log4j.PatternLayout
log4j.appender.I.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} %p -[%l ] - %m%n


#org.apache.log4j.ConsoleAppender 控制台
#org.apache.log4j.FileAppender 文件
#org.apache.log4j.DailyRollingFileAppender 每天产生一个日志文件
#org.apache.log4j.RollingFileAppender （文件大小到达指定尺寸的时候产生一个新的文件），
#org.apache.log4j.WriterAppender （将日志信息以流格式发送到任意指定的地方） 
#org.apache.log4j.net.SMTPAppender 邮件
#org.apache.log4j.jdbc.JDBCAppender 数据库

# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#　%r 输出自应用启动到输出该log信息耗费的毫秒数
#　%c 输出所属的类目，通常就是所在类的全名
#　%t 输出产生该日志事件的线程名
#　%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
#　%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#　%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
# %m 输出代码中指定的讯息，如log(message)中的message  






